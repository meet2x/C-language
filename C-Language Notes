Those are the basic c programming project Notes :

@. library functions
   #include <stdio.h>   - main function that include printf and scanf function
   #include <string.h>  - string function 
   #include <math.h>    - math functions
   #include <ctype.h>   - upper case, lower case, is number, is digit etc.
   #include <stdlib.h>  - include function to convert string in to numbers

@. int           - %d  - intigier datatype 
   small int     - %d  - small intigier datatype
   long int      - %ld - long intigier datatype ( can hold much larger value than int datatype almost 4 billion numbers )
   double int    - %ld - long intigier datatype
   unsigned int  - %u  - lnsigned intigier ( store only positive values )
   float         - %f  - float datatype
   long float    - %ld - long intigier datatype
   double float  - %ld - float intigier datatype
   char[5]       - %5c - character datatype to store characters only
   char[5]       - %5s - character datatype to store multiple character as well intigiers

@. - all short and long datatype is use different storage in different system 32 bits and 64 bits 16 bits
   - int uses 4 bytes in the memories, short int uses 2 bytes of memories

@. - you can also store the negetive values in initegier and float datatype

@. - printf(" type anything %d", a);
   - if %5.2f is written in printf or scanf, means total digits will be 5 and after the points there will be only 2 digits. [example - 123.45 or 12.25 or 1.25] 
   
@. - printf(" %d \n", a);
     \n  - use for new line
         - if you want to print \n in printf type one slash extra like \\n
         - if you want to print only \ in printf type one slash extra like \\
     \a  - for alert in windows pc
     \t  - work like tab in word horizontally

@. - scanf("%d", &a); 
     - " & " is called address operator

     - scanf(" %d %*d %d", &a, &b);
     - star value will be skipped

   - scanf("%d-%d-%d",&a, &b, &c);
     - the use need to input  5-10-15

@. - char x[5];
     scanf(" %5s", x);
     printf(" %-5s", x);
     - here the negetive sign is use because 5s represtents the 5 boxes if we type 3 characters it will fill the last 3 box, if we use minus sign it will fill the boxes from the 1st.
   
   - scanf(" %[^\n]", x);
     - it is represent that it can accept anything as input including space, this is used when i want an address as an input from the user
     - this is risk using with loop becuase it is taking it to the infinite

   - scanf(" %[a-z], x);
     - it can accpet input only from the a to z

@. - comment lines-   /*    */ OR //

@. - arithmetic operators
      +  -  *  /  %
     - modulas operator % is only use with int datatype
     - if in modulas operator -5%2 the answer will consider the sign of the first digit negetive, if it is 5%-2 the ans will be positive
     - if in modulas operator -5%-2 the answer will be in negetive
     - in in / operator -5/-3 result will be positive sign, and if one of the sign will be negetive the result will be negetive
     - i can use arithmetic operators in printf function directly
       example :
       printf(" %d", -x); -positve number will be negetive
       printf(" %d", x+2); -i can add 2 in to the result

   - relational operators
      ==   <=   >=   >   <   !=
       <= , <  first priority
       >= , >  second priority
       != , == third priority
         - if same level of priority accours it will be executed from left to right

   - logical operators
      && [and]   || [or]   ! [reverse - if the answer is true it will show you false]

   - assignment operators
      =   +=   -=   *=   /=

   - bitwise operators
     - operated bit by bit
         0 -> 0 0
         1 -> 0 1
         2 -> 1 0
         3 -> 1 1

@. - in any case in c program 0 suggest false
   - in any case in c program 1 suggest true

@. - strcmp(x, "this") - to compare strings
     - if i want to compare charater use '  ' insted of "  "   

@. - #define x 1
     - means it x value will be 1 in all the program
     - it is written below library functions before main() function
     - it can directly use in to the program but you can't diretly print it using printf function
     - it has some different uses also,
       #define N 5
       int main()
       {
         int value[N];
         int n;
         for(n=0 ; n<N ; ++n)
         {
            printf(" %d", n+1)
         }
       }   

@. - x = atoi(a) function which convert string in to numbers

@. - double parentheses will not work in c language as you use it in to excel.
   - for square root of perticular sqrt( x );

@. - c++ means it will increse the last value by adding 1
   - ++c means first it will increase the value first by adding 1
   - we can print c++ value by using printf function after exiting the loop

@. - if - else condition
     - do not use ; after any "if-else" and "else if" and "else"statement 
     - it is not mendetary to type "else" condition after "if", only if will work fine in some cases
     - "else" is not require condition after type, it is like the end of the statement
     - if i need to add more condition after if statement use "else if"

       if (condition)
        {
         logic
        }
       else if (condition)
        {
         logic
        }
       else
        {
         logic
        }

     - you can also use if with only one veriable
       Example :
       if(x)
       {
        printf(" 10 ");
       }
     - this will print 10 unless the x=0, because if x=0 it will consider as false condition

@. - while loop
     - run until the condition is setisfied

       while (condition)
       {
         logic
       }

   - infinity while loop
       while (1)
       {
         logic
       }

@. - type casting
   - float a = 2.4;
       printf( " %d" (int) a );
       - you can convert anything in numerical data types
       - use %d, %f, %lf according the datatype which is written in ( )
       - if you convert float into int datatype the round off will be result only in first number only like 9.9 will be 9, 9.2 will be 9

@. - return 0;
     - in old versions of c this is mandatory to use return 0; at the end of the programme, but in morden compilars it add return 0; automatically if you dont write it
     - in while(1) loop, if i type retun(0); at the end of the program will result in eliminated the concept of while infinite loop.
     - return(0); OR return 0; it indicate the termination of the program without any error.
     - it is used with the main function only
     - return(p); it return the p value to the main function.
       example -
       int func1 (int a, int b)
       {
        int p;
        p = a + b;
        return(p);
       }
     - return; it indicates the no retun value and it is used in void main() function.

   - exit(0);
     - write this will result in to termination of the programme immidiatly, after exit(0); is read by the compilar the further code will not execute
     - i can't type exit function like this exit( ); always use exit(0);
     - exit(0); it indicates the safe termination of the program, it is use only when breaking out of the system is necessary
     - exit(1); it indicates the error in termination of the programme
     - it can use anywhere in the programme

@. - user defind function / recursion function
     - when the function call itself
     - it is deviding the program in to sub program
     - when the program is solved recursively it is also solved with iteratively 
       int func1 (int a, int b);
       int main()
       {
         func1 (x, y);
       }
       // defining the function
       int func1 (int a, int b)
       {
         logic
         return (a);
       }
     - i can use arithmetic function directly during execution the sub program in to main program 

@. - swith function
     switch (a)
     {
       case a:
            (logic)
            break;
       case b:
            (logic)
            break;
       case c:
            (logic)
            break;
       default:
            (logic)
            break;
     }
     - it is used with only intigier and character datatype, can't use with float or anyother datatype
     - you can't perform any arithmetic, relational, logical and assignemnt opertors in to " case a: " statement
     - if break; is not used it will run through each line includeing default.
     - if none of the match happen it will execute the default statement

@. - break;
     - it can use with any loop to exit from the loop

@. - continue;
     - with using this it will skip the next part of the code and execute the code after that

@. - goto statement
     step1 :
     {
       code:
       goto step1 ;
     }
     - it is is used when i want to break multiple loop with the single statement

@. - for loop
     for ( define ; condition ; increase or decrease )
     - it can run with single element also. but the blank ; is mendetary to write in for loop
     - can able to perform arithmetic operations in 3 of the elements

@. - do not use veriable in an expression before it has been assign value because sometimes it requires initial value to execute the stuff
     Example -
     x = x + y; in this term x requires initialization x = 0
     count++ ; in this term count veriable also requires intialization count = 0

@. - global veriables - which are defind before main function, it can't be change
   - local veriables - which are defind into the main function, it can be change

@. - do while loop
     do
     {
       (execution)
     }
     while (condition)
     - use it when you need to execute the program at lest one time

@. - minus results and incorrect results most probebaly suggest the selected wrong datatype or overflow form the capecity of the datatype

@. - single ' ' is use when i work with single character
   - double " " is use when i work with strings

@. - const int vol_1 = 40;
   - if it written before the execution of the main function it value remain constant through the program

@. - voletile int vol_1 = 40;
   - it maybe change due to some external source

@. - conditional operator / ternary operator
     x = (a > b) ? a : b;
     - in above statement if first condition will true it will execute the a, if condition is not true it will execute b

@. - typedef EXISTING_DATATYPE NEW_DATATYPE
     - it is like rename the datatype i can remane it anything, it can only use at the begning part of the program before main function

@. - char answer;
     answer = getchar();
     - it will read the charaters from the user until enter key pressed
     - you can't print using pritf function
     - do not provide any space after entring the input in getchar because it will result in error 

   - a = 'y';
     putchar(a);
     - this is the revrse of getchar()
     - it is also use as a new line character in the terminal   

@. isalpha (c) > 0;
   isdigit (c) > 0;
   isalnum (c); - check it is alpha numeric
   islower (c); - check the letter is lowercase
   isupper (c); - check the letter is uppercase
   isprint (c); - check it is printable
   isspace (c); - check white spaces charater
   - is alpha assume non-zero value true if the argument contains alphabets , otherwise it assumes zero so we can directly use comparision in to the program

@. toupper(a); - convert letter in to upper case
   tolower(a); - convert letter in to lower case

@. - 43.21e-1 it will output in 4.321
   - printf(" %7.2e", a); - if you want to convert big number in to exponential form
   - in above example total max digits are 7 for output and 2 digits are after point value
   - when you use this function compilar will directly convert any float value to singal digit value + exponential form
     example :
     12.34, 123.4, 1234.1 will result 1.23e+2 form

